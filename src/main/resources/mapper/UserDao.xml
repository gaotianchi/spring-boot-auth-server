<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.gaotianchi.auth.dao.UserDao">

    <resultMap type="com.gaotianchi.auth.entity.User" id="UserMap">
        <result property="id" column="id" jdbcType="INTEGER"/>
        <result property="username" column="username" jdbcType="VARCHAR"/>
        <result property="password" column="password" jdbcType="VARCHAR"/>
        <result property="email" column="email" jdbcType="VARCHAR"/>
        <result property="createdAt" column="created_at" jdbcType="TIMESTAMP"/>
        <result property="updatedAt" column="updated_at" jdbcType="TIMESTAMP"/>
        <result property="lastLoginTime" column="last_login_time" jdbcType="TIMESTAMP"/>
        <result property="lastLoginIp" column="last_login_ip" jdbcType="VARCHAR"/>
        <result property="failedAttempts" column="failed_attempts" jdbcType="INTEGER"/>
        <result property="isLocked" column="is_locked" jdbcType="INTEGER"/>
        <result property="lockExpiration" column="lock_expiration" jdbcType="TIMESTAMP"/>
        <result property="isEnabled" column="is_enabled" jdbcType="INTEGER"/>
        <result property="verificationCode" column="verification_code" jdbcType="INTEGER"/>
        <result property="verificationCodeExpiration" column="verification_code_expiration" jdbcType="TIMESTAMP"/>
        <result property="emailIsVerified" column="email_is_verified" jdbcType="INTEGER"/>
    </resultMap>

    <select id="selectByUsernameOrEmail" resultMap="UserMap">
        SELECT id,
               username,
               password,
               email,
               created_at,
               updated_at,
               last_login_time,
               last_login_ip,
               failed_attempts,
               is_locked,
               lock_expiration,
               is_enabled,
               verification_code,
               verification_code_expiration,
               email_is_verified
        FROM user
        WHERE username = #{usernameOrEmail}
           OR email = #{usernameOrEmail}
    </select>

    <select id="selectUserRolesAndPermissionsNamesByUsernameOrEmail" resultType="java.lang.String">
        WITH user_roles AS (SELECT r.name AS role_name,
                                   p.name AS permission_name
                            FROM user u
                                     INNER JOIN
                                 user_role ur ON u.id = ur.user_id
                                     INNER JOIN
                                 role r ON ur.role_code = r.code
                                     LEFT JOIN
                                 role_permission rp ON r.code = rp.role_code
                                     LEFT JOIN
                                 permission p ON rp.permission_code = p.code
                            WHERE u.username = #{usernameOrEmail}
                               OR u.email = #{usernameOrEmail})
        SELECT DISTINCT CONCAT('ROLE_', role_name) AS name
        FROM user_roles

        UNION

        SELECT DISTINCT permission_name AS name
        FROM user_roles;
    </select>

    <select id="countByRoleCodes" resultType="java.lang.Long">
        SELECT COUNT(1)
        FROM user_role
        WHERE role_code IN
        <foreach collection="roleCodes" item="roleCode" separator="," open="(" close=")" index="roleCode"
                 nullable="false">
            #{roleCode}
        </foreach>
    </select>

    <select id="selectUsersWithCertainRoles" resultMap="UserMap">
        SELECT U.id,
        U.username,
        NULL,
        U.email,
        U.created_at,
        U.updated_at,
        U.last_login_time,
        U.last_login_ip,
        U.failed_attempts,
        U.is_locked,
        U.lock_expiration,
        U.is_enabled,
        U.verification_code,
        U.verification_code_expiration,
        U.email_is_verified
        FROM user U
        INNER JOIN user_role UR ON U.id = UR.user_id
        WHERE UR.role_code IN
        <foreach collection="roleCodes" item="roleCode" separator="," open="(" close=")" index="roleCode"
                 nullable="false">
            #{roleCode}
        </foreach>
        <choose>
            <when test="pageable.sort != null">
                ORDER BY
                <foreach collection="pageable.sort" item="sortOrder" separator=",">
                    ${sortOrder.property} ${sortOrder.direction}
                </foreach>
            </when>
            <otherwise>
                ORDER BY id
            </otherwise>
        </choose>
        limit #{pageable.offset}, #{pageable.pageSize}
    </select>
</mapper>

