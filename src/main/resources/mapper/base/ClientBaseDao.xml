<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.gaotianchi.auth.infrastructure.dao.ClientBaseDao">

    <resultMap type="com.gaotianchi.auth.infrastructure.entity.Client" id="ClientMap">
        <result property="id" column="id" jdbcType="INTEGER"/>
        <result property="clientId" column="client_id" jdbcType="VARCHAR"/>
        <result property="clientIdIssuedAt" column="client_id_issued_at" jdbcType="TIMESTAMP"/>
        <result property="clientSecret" column="client_secret" jdbcType="VARCHAR"/>
        <result property="clientSecretExpiresAt" column="client_secret_expires_at" jdbcType="TIMESTAMP"/>
        <result property="clientName" column="client_name" jdbcType="VARCHAR"/>
        <result property="authorizationGrantTypes" column="authorization_grant_types" jdbcType="VARCHAR"/>
        <result property="redirectUris" column="redirect_uris" jdbcType="VARCHAR"/>
        <result property="scopes" column="scopes" jdbcType="VARCHAR"/>
        <result property="clientAuthenticationMethods" column="client_authentication_methods" jdbcType="VARCHAR"/>
        <result property="postLogoutRedirectUris" column="post_logout_redirect_uris" jdbcType="VARCHAR"/>
        <result property="requireProofKey" column="require_proof_key" jdbcType="INTEGER"/>
        <result property="requireAuthorizationConsent" column="require_authorization_consent" jdbcType="INTEGER"/>
        <result property="accessTokenTimeLive" column="access_token_time_live" jdbcType="INTEGER"/>
        <result property="refreshTokenTimeToLive" column="refresh_token_time_to_live" jdbcType="INTEGER"/>
        <result property="reuseRefreshTokens" column="reuse_refresh_tokens" jdbcType="INTEGER"/>
    </resultMap>

    <insert id="insertClient" keyProperty="id" useGeneratedKeys="true">
        INSERT INTO client(client_id, client_id_issued_at, client_secret, client_secret_expires_at, client_name,
                           authorization_grant_types, redirect_uris, scopes, client_authentication_methods,
                           post_logout_redirect_uris, require_proof_key, require_authorization_consent,
                           access_token_time_live, refresh_token_time_to_live, reuse_refresh_tokens)
        VALUES (#{clientId}, #{clientIdIssuedAt}, #{clientSecret}, #{clientSecretExpiresAt}, #{clientName},
                #{authorizationGrantTypes}, #{redirectUris}, #{scopes}, #{clientAuthenticationMethods},
                #{postLogoutRedirectUris}, #{requireProofKey}, #{requireAuthorizationConsent}, #{accessTokenTimeLive},
                #{refreshTokenTimeToLive}, #{reuseRefreshTokens})
    </insert>

    <insert id="insertClientsInBatches" keyProperty="id" useGeneratedKeys="true">
        INSERT INTO client
        (client_id, client_id_issued_at, client_secret, client_secret_expires_at, client_name,
        authorization_grant_types, redirect_uris, scopes, client_authentication_methods, post_logout_redirect_uris,
        require_proof_key, require_authorization_consent, access_token_time_live, refresh_token_time_to_live,
        reuse_refresh_tokens)
        VALUES
        <foreach collection="entities" item="entity" separator=",">
            (#{entity.clientId}, #{entity.clientIdIssuedAt}, #{entity.clientSecret}, #{entity.clientSecretExpiresAt},
            #{entity.clientName}, #{entity.authorizationGrantTypes}, #{entity.redirectUris}, #{entity.scopes},
            #{entity.clientAuthenticationMethods}, #{entity.postLogoutRedirectUris}, #{entity.requireProofKey},
            #{entity.requireAuthorizationConsent}, #{entity.accessTokenTimeLive}, #{entity.refreshTokenTimeToLive},
            #{entity.reuseRefreshTokens})
        </foreach>
    </insert>

    <delete id="deleteClientById">
        DELETE
        FROM client
        WHERE id = #{id}
    </delete>

    <delete id="deleteClientsInBatchesByIds">
        DELETE
        FROM client
        WHERE id IN
        <foreach collection="ids" item="id" separator="," open="(" close=")">
            #{id}
        </foreach>
    </delete>

    <update id="updateClientById">
        UPDATE client
        <set>
            <if test="clientId != null and clientId != ''">
                client_id = #{clientId},
            </if>
            <if test="clientIdIssuedAt != null">
                client_id_issued_at = #{clientIdIssuedAt},
            </if>
            <if test="clientSecret != null and clientSecret != ''">
                client_secret = #{clientSecret},
            </if>
            <if test="clientSecretExpiresAt != null">
                client_secret_expires_at = #{clientSecretExpiresAt},
            </if>
            <if test="clientName != null and clientName != ''">
                client_name = #{clientName},
            </if>
            <if test="authorizationGrantTypes != null and authorizationGrantTypes != ''">
                authorization_grant_types = #{authorizationGrantTypes},
            </if>
            <if test="redirectUris != null and redirectUris != ''">
                redirect_uris = #{redirectUris},
            </if>
            <if test="scopes != null and scopes != ''">
                scopes = #{scopes},
            </if>
            <if test="clientAuthenticationMethods != null and clientAuthenticationMethods != ''">
                client_authentication_methods = #{clientAuthenticationMethods},
            </if>
            <if test="postLogoutRedirectUris != null and postLogoutRedirectUris != ''">
                post_logout_redirect_uris = #{postLogoutRedirectUris},
            </if>
            <if test="requireProofKey != null">
                require_proof_key = #{requireProofKey},
            </if>
            <if test="requireAuthorizationConsent != null">
                require_authorization_consent = #{requireAuthorizationConsent},
            </if>
            <if test="accessTokenTimeLive != null">
                access_token_time_live = #{accessTokenTimeLive},
            </if>
            <if test="refreshTokenTimeToLive != null">
                refresh_token_time_to_live = #{refreshTokenTimeToLive},
            </if>
            <if test="reuseRefreshTokens != null">
                reuse_refresh_tokens = #{reuseRefreshTokens},
            </if>
        </set>
        WHERE id = #{id}
    </update>

    <insert id="insertOrUpdateExistingClientsInBatches" keyProperty="id" useGeneratedKeys="true">
        INSERT INTO client
        (client_id, client_id_issued_at, client_secret, client_secret_expires_at, client_name,
        authorization_grant_types, redirect_uris, scopes, client_authentication_methods, post_logout_redirect_uris,
        require_proof_key, require_authorization_consent, access_token_time_live, refresh_token_time_to_live,
        reuse_refresh_tokens)
        VALUES
        <foreach collection="entities" item="entity" separator=",">
            (#{entity.clientId}, #{entity.clientIdIssuedAt}, #{entity.clientSecret}, #{entity.clientSecretExpiresAt},
            #{entity.clientName}, #{entity.authorizationGrantTypes}, #{entity.redirectUris}, #{entity.scopes},
            #{entity.clientAuthenticationMethods}, #{entity.postLogoutRedirectUris}, #{entity.requireProofKey},
            #{entity.requireAuthorizationConsent}, #{entity.accessTokenTimeLive}, #{entity.refreshTokenTimeToLive},
            #{entity.reuseRefreshTokens})
        </foreach>
        ON DUPLICATE KEY UPDATE
        client_id = VALUES(client_id)
        ,client_id_issued_at = VALUES(client_id_issued_at)
        ,client_secret = VALUES(client_secret)
        ,client_secret_expires_at = VALUES(client_secret_expires_at)
        ,client_name = VALUES(client_name)
        ,authorization_grant_types = VALUES(authorization_grant_types)
        ,redirect_uris = VALUES(redirect_uris)
        ,scopes = VALUES(scopes)
        ,client_authentication_methods = VALUES(client_authentication_methods)
        ,post_logout_redirect_uris = VALUES(post_logout_redirect_uris)
        ,require_proof_key = VALUES(require_proof_key)
        ,require_authorization_consent = VALUES(require_authorization_consent)
        ,access_token_time_live = VALUES(access_token_time_live)
        ,refresh_token_time_to_live = VALUES(refresh_token_time_to_live)
        ,reuse_refresh_tokens = VALUES(reuse_refresh_tokens)
    </insert>

    <select id="selectClientById" resultMap="ClientMap">
        SELECT id,
               client_id,
               client_id_issued_at,
               client_secret,
               client_secret_expires_at,
               client_name,
               authorization_grant_types,
               redirect_uris,
               scopes,
               client_authentication_methods,
               post_logout_redirect_uris,
               require_proof_key,
               require_authorization_consent,
               access_token_time_live,
               refresh_token_time_to_live,
               reuse_refresh_tokens
        FROM client
        WHERE id = #{id}
    </select>

    <select id="countByClient" resultType="java.lang.Long">
        SELECT count(1)
        FROM client
        <where>
            <if test="id != null">
                and id = #{id}
            </if>
            <if test="clientId != null and clientId != ''">
                and client_id = #{clientId}
            </if>
            <if test="clientIdIssuedAt != null">
                and client_id_issued_at = #{clientIdIssuedAt}
            </if>
            <if test="clientSecret != null and clientSecret != ''">
                and client_secret = #{clientSecret}
            </if>
            <if test="clientSecretExpiresAt != null">
                and client_secret_expires_at = #{clientSecretExpiresAt}
            </if>
            <if test="clientName != null and clientName != ''">
                and client_name = #{clientName}
            </if>
            <if test="authorizationGrantTypes != null and authorizationGrantTypes != ''">
                and authorization_grant_types = #{authorizationGrantTypes}
            </if>
            <if test="redirectUris != null and redirectUris != ''">
                and redirect_uris = #{redirectUris}
            </if>
            <if test="scopes != null and scopes != ''">
                and scopes = #{scopes}
            </if>
            <if test="clientAuthenticationMethods != null and clientAuthenticationMethods != ''">
                and client_authentication_methods = #{clientAuthenticationMethods}
            </if>
            <if test="postLogoutRedirectUris != null and postLogoutRedirectUris != ''">
                and post_logout_redirect_uris = #{postLogoutRedirectUris}
            </if>
            <if test="requireProofKey != null">
                and require_proof_key = #{requireProofKey}
            </if>
            <if test="requireAuthorizationConsent != null">
                and require_authorization_consent = #{requireAuthorizationConsent}
            </if>
            <if test="accessTokenTimeLive != null">
                and access_token_time_live = #{accessTokenTimeLive}
            </if>
            <if test="refreshTokenTimeToLive != null">
                and refresh_token_time_to_live = #{refreshTokenTimeToLive}
            </if>
            <if test="reuseRefreshTokens != null">
                and reuse_refresh_tokens = #{reuseRefreshTokens}
            </if>
        </where>
    </select>

    <select id="selectClientsByPage" resultMap="ClientMap">
        SELECT
        id, client_id, client_id_issued_at, client_secret, client_secret_expires_at, client_name,
        authorization_grant_types, redirect_uris, scopes, client_authentication_methods, post_logout_redirect_uris,
        require_proof_key, require_authorization_consent, access_token_time_live, refresh_token_time_to_live,
        reuse_refresh_tokens
        FROM client
        <where>
            <if test="id != null">
                and id = #{id}
            </if>
            <if test="clientId != null and clientId != ''">
                and client_id = #{clientId}
            </if>
            <if test="clientIdIssuedAt != null">
                and client_id_issued_at = #{clientIdIssuedAt}
            </if>
            <if test="clientSecret != null and clientSecret != ''">
                and client_secret = #{clientSecret}
            </if>
            <if test="clientSecretExpiresAt != null">
                and client_secret_expires_at = #{clientSecretExpiresAt}
            </if>
            <if test="clientName != null and clientName != ''">
                and client_name = #{clientName}
            </if>
            <if test="authorizationGrantTypes != null and authorizationGrantTypes != ''">
                and authorization_grant_types = #{authorizationGrantTypes}
            </if>
            <if test="redirectUris != null and redirectUris != ''">
                and redirect_uris = #{redirectUris}
            </if>
            <if test="scopes != null and scopes != ''">
                and scopes = #{scopes}
            </if>
            <if test="clientAuthenticationMethods != null and clientAuthenticationMethods != ''">
                and client_authentication_methods = #{clientAuthenticationMethods}
            </if>
            <if test="postLogoutRedirectUris != null and postLogoutRedirectUris != ''">
                and post_logout_redirect_uris = #{postLogoutRedirectUris}
            </if>
            <if test="requireProofKey != null">
                and require_proof_key = #{requireProofKey}
            </if>
            <if test="requireAuthorizationConsent != null">
                and require_authorization_consent = #{requireAuthorizationConsent}
            </if>
            <if test="accessTokenTimeLive != null">
                and access_token_time_live = #{accessTokenTimeLive}
            </if>
            <if test="refreshTokenTimeToLive != null">
                and refresh_token_time_to_live = #{refreshTokenTimeToLive}
            </if>
            <if test="reuseRefreshTokens != null">
                and reuse_refresh_tokens = #{reuseRefreshTokens}
            </if>
        </where>
        limit #{pageable.offset}, #{pageable.pageSize}
    </select>
</mapper>

