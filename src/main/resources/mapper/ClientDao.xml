<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.gaotianchi.auth.dao.ClientDao">

    <resultMap type="com.gaotianchi.auth.entity.Client" id="ClientMap">
        <result property="id" column="id" jdbcType="INTEGER"/>
        <result property="clientId" column="client_id" jdbcType="VARCHAR"/>
        <result property="clientIdIssuedAt" column="client_id_issued_at" jdbcType="TIMESTAMP"/>
        <result property="clientSecret" column="client_secret" jdbcType="VARCHAR"/>
        <result property="clientSecretExpiresAt" column="client_secret_expires_at" jdbcType="TIMESTAMP"/>
        <result property="clientName" column="client_name" jdbcType="VARCHAR"/>
        <result property="authorizationGrantTypes" column="authorization_grant_types" jdbcType="VARCHAR"/>
        <result property="redirectUris" column="redirect_uris" jdbcType="VARCHAR"/>
        <result property="postLogoutRedirectUris" column="post_logout_redirect_uris" jdbcType="VARCHAR"/>
        <result property="scopes" column="scopes" jdbcType="VARCHAR"/>
        <result property="clientAuthenticationMethods" column="client_authentication_methods" jdbcType="VARCHAR"/>
        <result property="requireProofKey" column="require_proof_key" jdbcType="INTEGER"/>
        <result property="requireAuthorizationConsent" column="require_authorization_consent" jdbcType="INTEGER"/>
        <result property="accessTokenTimeLive" column="access_token_time_live" jdbcType="INTEGER"/>
        <result property="refreshTokenTimeToLive" column="refresh_token_time_to_live" jdbcType="INTEGER"/>
        <result property="reuseRefreshTokens" column="reuse_refresh_tokens" jdbcType="INTEGER"/>
    </resultMap>

    <insert id="insertClient" keyProperty="id" useGeneratedKeys="true">
        INSERT INTO client(client_id, client_id_issued_at, client_secret, client_secret_expires_at, client_name,
                           authorization_grant_types, redirect_uris, post_logout_redirect_uris, scopes,
                           client_authentication_methods, require_proof_key, require_authorization_consent,
                           access_token_time_live, refresh_token_time_to_live, reuse_refresh_tokens)
        VALUES (#{clientId}, #{clientIdIssuedAt}, #{clientSecret}, #{clientSecretExpiresAt}, #{clientName},
                #{authorizationGrantTypes}, #{redirectUris}, #{postLogoutRedirectUris}, #{scopes},
                #{clientAuthenticationMethods}, #{requireProofKey}, #{requireAuthorizationConsent},
                #{accessTokenTimeLive}, #{refreshTokenTimeToLive}, #{reuseRefreshTokens})
    </insert>

    <delete id="deleteClientById">
        DELETE
        FROM client
        where id = #{id}
    </delete>

    <update id="updateClientById">
        UPDATE client
        <set>
            <if test="clientId != null and clientId != ''">
                client_id = #{clientId},
            </if>
            <if test="clientIdIssuedAt != null">
                client_id_issued_at = #{clientIdIssuedAt},
            </if>
            <if test="clientSecret != null and clientSecret != ''">
                client_secret = #{clientSecret},
            </if>
            <if test="clientSecretExpiresAt != null">
                client_secret_expires_at = #{clientSecretExpiresAt},
            </if>
            <if test="clientName != null and clientName != ''">
                client_name = #{clientName},
            </if>
            <if test="authorizationGrantTypes != null and authorizationGrantTypes != ''">
                authorization_grant_types = #{authorizationGrantTypes},
            </if>
            <if test="redirectUris != null and redirectUris != ''">
                redirect_uris = #{redirectUris},
            </if>
            <if test="postLogoutRedirectUris != null and postLogoutRedirectUris != ''">
                post_logout_redirect_uris = #{postLogoutRedirectUris},
            </if>
            <if test="scopes != null and scopes != ''">
                scopes = #{scopes},
            </if>
            <if test="clientAuthenticationMethods != null and clientAuthenticationMethods != ''">
                client_authentication_methods = #{clientAuthenticationMethods},
            </if>
            <if test="requireProofKey != null">
                require_proof_key = #{requireProofKey},
            </if>
            <if test="requireAuthorizationConsent != null">
                require_authorization_consent = #{requireAuthorizationConsent},
            </if>
            <if test="accessTokenTimeLive != null">
                access_token_time_live = #{accessTokenTimeLive},
            </if>
            <if test="refreshTokenTimeToLive != null">
                refresh_token_time_to_live = #{refreshTokenTimeToLive},
            </if>
            <if test="reuseRefreshTokens != null">
                reuse_refresh_tokens = #{reuseRefreshTokens},
            </if>
        </set>
        WHERE id = #{id}
    </update>

    <select id="selectClientById" resultMap="ClientMap">
        SELECT id,
               client_id,
               client_id_issued_at,
               client_secret,
               client_secret_expires_at,
               client_name,
               authorization_grant_types,
               redirect_uris,
               post_logout_redirect_uris,
               scopes,
               client_authentication_methods,
               require_proof_key,
               require_authorization_consent,
               access_token_time_live,
               refresh_token_time_to_live,
               reuse_refresh_tokens
        FROM client
        WHERE id = #{id}
    </select>

    <select id="selectClientByClientIdOrClientName">
        SELECT id,
               client_id,
               client_id_issued_at,
               client_secret,
               client_secret_expires_at,
               client_name,
               authorization_grant_types,
               redirect_uris,
               post_logout_redirect_uris,
               scopes,
               client_authentication_methods,
               require_proof_key,
               require_authorization_consent,
               access_token_time_live,
               refresh_token_time_to_live,
               reuse_refresh_tokens
        FROM client
        WHERE client_id = #{clientIdOrClientName}
           OR client_name = #{clientIdOrClientName}
    </select>
</mapper>

